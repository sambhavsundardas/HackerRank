typedef struct {
    int value;
    int index;
} Pair;

int compare_asc(const void* a, const void* b) {
    Pair* pa = (Pair*)a;
    Pair* pb = (Pair*)b;
    return pa->value - pb->value;
}

int compare_desc(const void* a, const void* b) {
    Pair* pa = (Pair*)a;
    Pair* pb = (Pair*)b;
    return pb->value - pa->value;
}

int count_swaps(int* arr, int n, bool ascending) {
    Pair* arr_pos = malloc(n * sizeof(Pair));
    for (int i = 0; i < n; i++) {
        arr_pos[i].value = arr[i];
        arr_pos[i].index = i;
    }

    if (ascending)
        qsort(arr_pos, n, sizeof(Pair), compare_asc);
    else
        qsort(arr_pos, n, sizeof(Pair), compare_desc);

    bool* visited = calloc(n, sizeof(bool));
    int swaps = 0;

    for (int i = 0; i < n; i++) {
        if (visited[i] || arr_pos[i].index == i)
            continue;

        int cycle_size = 0;
        int j = i;
        while (!visited[j]) {
            visited[j] = true;
            j = arr_pos[j].index;
            cycle_size++;
        }

        if (cycle_size > 0)
            swaps += (cycle_size - 1);
    }

    free(arr_pos);
    free(visited);
    return swaps;
}

int lilysHomework(int arr_count, int* arr) {
    int swaps_asc = count_swaps(arr, arr_count, true);
    int swaps_desc = count_swaps(arr, arr_count, false);
    return swaps_asc < swaps_desc ? swaps_asc : swaps_desc;
}
